// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

use super::stdb_complex::StdbComplex;
use super::stdb_vector_2::StdbVector2;
#[allow(unused)]
use spacetimedb_sdk::{
    anyhow::{anyhow, Result},
    identity::Identity,
    reducer::{Reducer, ReducerCallbackId, Status},
    sats::{de::Deserialize, ser::Serialize},
    spacetimedb_lib,
    table::{TableIter, TableType, TableWithPrimaryKey},
    Address,
};

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DynamicEntity {
    pub owner: Identity,
    pub rigid_body_id: u64,
    pub position: StdbVector2,
    pub rotation: StdbComplex,
}

impl TableType for DynamicEntity {
    const TABLE_NAME: &'static str = "DynamicEntity";
    type ReducerEvent = super::ReducerEvent;
}

impl TableWithPrimaryKey for DynamicEntity {
    type PrimaryKey = Identity;
    fn primary_key(&self) -> &Self::PrimaryKey {
        &self.owner
    }
}

impl DynamicEntity {
    #[allow(unused)]
    pub fn filter_by_owner(owner: Identity) -> Option<Self> {
        Self::find(|row| row.owner == owner)
    }
    #[allow(unused)]
    pub fn filter_by_rigid_body_id(rigid_body_id: u64) -> Option<Self> {
        Self::find(|row| row.rigid_body_id == rigid_body_id)
    }
    #[allow(unused)]
    pub fn filter_by_position(position: StdbVector2) -> TableIter<Self> {
        Self::filter(|row| row.position == position)
    }
    #[allow(unused)]
    pub fn filter_by_rotation(rotation: StdbComplex) -> TableIter<Self> {
        Self::filter(|row| row.rotation == rotation)
    }
}
